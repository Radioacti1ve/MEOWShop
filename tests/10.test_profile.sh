# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

TOTAL_TESTS=0
FAILED_TESTS=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON
validate_response() {
    local response="$1"
    local expected_status="${2:-200}"
    local test_name="$3"
    local validation_command="$4"
    local error_message="$5"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    local test_result=0
    local http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d':' -f2)
    local body=$(echo "$response" | sed '/HTTP_CODE/d')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞
    if [ "$http_code" = "$expected_status" ]; then
        echo -e "${GREEN}‚úì HTTP —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–Ω—ã–π: $http_code${NC}"
    else
        echo -e "${RED}‚úó –ù–µ–≤–µ—Ä–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: $http_code (–æ–∂–∏–¥–∞–ª—Å—è: $expected_status)${NC}"
        test_result=1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if ! echo "$body" | jq '.' >/dev/null 2>&1; then
        echo -e "${RED}‚úó –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –æ—Ç–≤–µ—Ç${NC}"
        test_result=1
    elif [ -n "$validation_command" ]; then
        if ! echo "$body" | eval "$validation_command" >/dev/null 2>&1; then
            echo -e "${RED}‚úó $error_message${NC}"
            test_result=1
        fi
    fi
    
    [[ $test_result == 1 ]] && FAILED_TESTS=$((FAILED_TESTS + 1))
    echo "$body" | jq '.'
    echo "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ \"$test_name\": $test_result (0=—É—Å–ø–µ—Ö, 1=–æ—à–∏–±–∫–∞)"
    return $test_result
}

USERNAME="user$(date +%s)"
PASSWORD="password123"
EMAIL="${USERNAME}@example.com"

echo "üìå –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $USERNAME"
response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST http://localhost:8000/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "username": "'"$USERNAME"'",
    "email": "'"$EMAIL"'",
    "password": "'"$PASSWORD"'"
  }')
validate_response "$response" "201" "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" \
    'jq -e ".message == \"User created successfully\" and .user_id"' \
    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
echo -e "\n"

echo "üìå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $USERNAME"
response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST http://localhost:8000/auth/login \
  -H "Content-Type: application/json" \
  -d "{\"username\":\"$USERNAME\", \"password\":\"$PASSWORD\"}")

validate_response "$response" "200" "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" \
    'jq -e ".access_token and .refresh_token and .token_type == \"bearer\""' \
    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
RESPONSE_BODY=$(echo "$response" | sed '/HTTP_CODE/d')
echo "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ª–æ–≥–∏–Ω: $RESPONSE_BODY"
TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.access_token')

if [[ "$TOKEN" == "null" || -z "$TOKEN" ]]; then
  echo "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω"
  exit 1
fi

echo -e "\n‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: $TOKEN"

NEW_USERNAME="${USERNAME}_updated"
NEW_EMAIL="${NEW_USERNAME}@example.com"

echo -e "\nüìå –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username –∏ email)"
response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X PUT http://localhost:8000/users/profile/update \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "new_username": "'"$NEW_USERNAME"'",
    "new_email": "'"$NEW_EMAIL"'"
  }')
validate_response "$response" "200" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è" \
    'jq -e ".message == \"Profile updated successfully\""' \
    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"
echo -e "\n"

# === –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
echo -e "\n=== –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ==="
echo "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS"
echo "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $FAILED_TESTS"
echo "–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: $((TOTAL_TESTS - FAILED_TESTS))"
[[ $FAILED_TESTS -gt 0 ]] && exit 1 || exit 0
