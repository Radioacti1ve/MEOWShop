#!/bin/bash

# –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color
YELLOW='\033[1;33m'
BLUE='\033[0;34m'

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–µ—Å—Ç–∞–º–∏
TEST_DIR="$(dirname "$0")"
cd "$TEST_DIR"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
LOGS_DIR="test_logs"
ARCHIVE_DIR="$LOGS_DIR/archive"
mkdir -p "$LOGS_DIR"
mkdir -p "$ARCHIVE_DIR"

# –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
archive_old_logs() {
    # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏ –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å
    [ -z "$(ls -A $LOGS_DIR 2>/dev/null)" ] && return 0
    
    local date_stamp=$(date "+%Y%m%d_%H%M%S")
    local archive_file="$ARCHIVE_DIR/logs_${date_stamp}.tar.gz"
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
    if compgen -G "$LOGS_DIR/*.log" > /dev/null; then
        # –ü–æ–¥–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ tar, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
        tar -czf "$archive_file" -C "$LOGS_DIR" *.log 2>/dev/null || true
    fi
    
    # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    find "$ARCHIVE_DIR" -name "logs_*.tar.gz" -mtime +7 -delete 2>/dev/null || true
}

# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
archive_old_logs
rm -f "$LOGS_DIR"/*.log

# –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
TOTAL=0
PASSED=0
FAILED=0
SKIPPED=0

# –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
TEST_TIMEOUT=300

# –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
TOTAL_START_TIME=$(date +%s)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
check_server() {
    local log_file="$LOGS_DIR/server_check.log"
    for i in {1..30}; do
        local response=$(curl -s -w "\nHTTP_CODE:%{http_code}" "http://localhost:8000")
        local http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d':' -f2)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –ª–æ–≥
        format_log "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É ($i/30). –û—Ç–≤–µ—Ç: $response" "$log_file"
        
        if [ "$http_code" = "200" ]; then
            format_log "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω. HTTP –∫–æ–¥: $http_code" "$log_file"
            echo -e "${GREEN}‚úì –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            return 0
        fi
        echo -e "${YELLOW}‚åõ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É... (–ø–æ–ø—ã—Ç–∫–∞ $i/30)${NC}\r"
        sleep 1
    done
    
    format_log "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è" "$log_file" "ERROR"
    echo -e "${RED}‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥
format_log() {
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    local level="${3:-INFO}"
    printf "[%-19s] [%-5s] %s\n" "$timestamp" "$level" "$1" >> "$2"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
show_progress() {
    local current=$1
    local total=$2
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    if [ "$total" -eq 0 ]; then
        return
    fi
    
    local percent=$((current * 100 / total))
    local done=$((percent / 2))
    local remaining=$((50 - done))
    
    printf "\r${BLUE}[%-${done}s%${remaining}s] %d%%${NC} (–¢–µ—Å—Ç %d –∏–∑ %d)" \
           "$(printf '#%.0s' $(seq 1 $done))" \
           "$(printf ' %.0s' $(seq 1 $remaining))" \
           "$percent" "$current" "$total"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
format_error() {
    local error_msg="$1"
    local log_file="$2"
    format_log "$error_msg" "$log_file" "ERROR"
    echo "----------------------------------------" >> "$log_file"
    echo "$error_msg" | fold -w 80 -s >> "$log_file"
    echo "----------------------------------------" >> "$log_file"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
run_test() {
    local test_file="$1"
    local test_name="$(basename "$test_file")"
    local log_file="$LOGS_DIR/${test_name}.log"
    local start_time=$(date +%s)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –≤ –ª–æ–≥
    format_log "–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: $test_name" "$log_file"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—Å–µ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥
    timeout $TEST_TIMEOUT bash "$test_file" >> "$log_file" 2>&1
    local result=$?
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    if [ $result -eq 0 ]; then
        PASSED=$((PASSED + 1))
        echo -e "${GREEN}‚úÖ $test_name: —É—Å–ø–µ—à–Ω–æ (${duration}s)${NC}"
    elif [ $result -eq 124 ]; then
        FAILED=$((FAILED + 1))
        echo -e "${RED}‚è∞ $test_name: –ø—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç${NC}"
    else
        FAILED=$((FAILED + 1))
        echo -e "${RED}‚ùå $test_name: –æ—à–∏–±–∫–∞ (–∫–æ–¥ $result, ${duration}s)${NC}"
    fi
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥
    if [ $result -eq 0 ]; then
        format_log "‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}s" "$log_file"
    elif [ $result -eq 124 ]; then
        format_log "‚è∞ –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç ${TEST_TIMEOUT}s" "$log_file" "ERROR"
    else
        format_log "‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ $result) –∑–∞ ${duration}s" "$log_file" "ERROR"
    fi
    
    return $result
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
find_and_run_tests() {
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
    local tests=($(find . -maxdepth 1 -type f -name '[0-9]*.test_*.sh' | sort))
    TOTAL=${#tests[@]}
    
    format_log "–ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL" "$LOGS_DIR/summary.log"
    echo -e "${BLUE}üîç –ó–∞–ø—É—Å–∫ $TOTAL —Ç–µ—Å—Ç–æ–≤...${NC}\n"
    
    local current=1
    for test in "${tests[@]}"; do
        show_progress "$current" "$TOTAL"
        run_test "$test"
        current=$((current + 1))
    done
    echo -e "\n" # –î–≤–µ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
print_summary() {
    local total_end_time=$(date +%s)
    local total_duration=$((total_end_time - TOTAL_START_TIME))
    local minutes=$((total_duration / 60))
    local seconds=$((total_duration % 60))
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ –≤ –ª–æ–≥
    format_log "==== –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====" "$LOGS_DIR/summary.log"
    format_log "–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${minutes}m ${seconds}s" "$LOGS_DIR/summary.log"
    format_log "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL" "$LOGS_DIR/summary.log"
    format_log "–£—Å–ø–µ—à–Ω–æ: $PASSED" "$LOGS_DIR/summary.log"
    format_log "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $FAILED" "$LOGS_DIR/summary.log"
    [ $SKIPPED -gt 0 ] && format_log "–ü—Ä–æ–ø—É—â–µ–Ω–æ: $SKIPPED" "$LOGS_DIR/summary.log"
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
    echo -e "\n----------------------------------------"
    echo -e "${BLUE}üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${NC}"
    echo -e "‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${minutes}m ${seconds}s"
    echo -e "üìã –¢–µ—Å—Ç—ã: $TOTAL | ${GREEN}‚úÖ –£—Å–ø–µ—à–Ω–æ: $PASSED${NC} | ${RED}‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $FAILED${NC}"
    [ $SKIPPED -gt 0 ] && echo -e "${YELLOW}‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: $SKIPPED${NC}"
    echo -e "----------------------------------------"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª test_summary.log
    {
        echo "=== –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ==="
        echo "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: $(date -d @$TOTAL_START_TIME '+%Y-%m-%d %H:%M:%S')"
        echo "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date -d @$total_end_time '+%Y-%m-%d %H:%M:%S')"
        echo "–û–±—â–µ–µ –≤—Ä–µ–º—è: ${minutes}m ${seconds}s"
        echo ""
        echo "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–µ—Å—Ç–∞–º:"
        for test_file in $(find . -maxdepth 1 -name "[0-9]*.test_*.sh" | sort); do
            local test_name=$(basename "$test_file")
            local log_file="$LOGS_DIR/${test_name}.log"
            if [ -f "$log_file" ]; then
                if grep -q "‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω" "$log_file"; then
                    echo "‚úÖ $test_name"
                else
                    echo "‚ùå $test_name"
                    echo "  –û—à–∏–±–∫–∏:"
                    grep -B 1 -A 1 "ERROR" "$log_file" | sed 's/^/    /'
                fi
            fi
        done
    } > "$LOGS_DIR/test_summary.log"
}

# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
main() {
    if ! check_server; then
        echo -e "${RED}‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        exit 1
    fi
    
    find_and_run_tests
    print_summary
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if [ $FAILED -eq 0 ] && [ $TOTAL -gt 0 ]; then
        echo -e "${GREEN}‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
        exit 0
    else
        echo -e "${RED}‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π${NC}"
        exit 1
    fi
}

main
