#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
TOTAL_TESTS=10
PASSED_TESTS=0
declare -a FAILED_TESTS

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
log_test_result() {
    local test_name="$1"
    local result="$2"
    
    if [ "$result" = "pass" ]; then
        PASSED_TESTS=$((PASSED_TESTS + 1))
        echo -e "${GREEN}‚úì –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: $test_name${NC}"
    else
        FAILED_TESTS+=("$test_name")
        echo -e "${RED}‚úó –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: $test_name${NC}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    local response="$1"
    local expected_status="${2:-200}"
    local http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d':' -f2)
    
    if [ "$http_code" = "$expected_status" ]; then
        echo -e "${GREEN}‚úì HTTP —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–Ω—ã–π: $http_code${NC}"
        return 0
    else
        echo -e "${RED}‚úó –ù–µ–≤–µ—Ä–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: $http_code (–æ–∂–∏–¥–∞–ª—Å—è: $expected_status)${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
get_response_body() {
    echo "$1" | sed '/HTTP_CODE/d'
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—è –≤ JSON-–æ—Ç–≤–µ—Ç–µ
check_json_field() {
    local response="$1"
    local field="$2"
    local expected_value="$3"
    local error_message="$4"
    
    local actual_value=$(echo "$response" | jq -r ".$field")
    if [[ "$actual_value" == "null" && "$expected_value" != "null" ]]; then
        echo -e "${RED}‚úó –û—à–∏–±–∫–∞: –ü–æ–ª–µ $field –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–∞–≤–Ω–æ null${NC}"
        echo "–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:"
        echo "$response" | jq .
        return 1
    elif [[ "$expected_value" != "null" && "$actual_value" != "$expected_value" ]]; then
        echo -e "${RED}‚úó –û—à–∏–±–∫–∞: $error_message${NC}"
        echo "–û–∂–∏–¥–∞–ª–æ—Å—å: $expected_value"
        echo "–ü–æ–ª—É—á–µ–Ω–æ: $actual_value"
        return 1
    fi
    echo -e "${GREEN}‚úì –ü–æ–ª–µ $field –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${NC}"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
check_token() {
    local token="$1"
    local token_name="$2"
    
    if [[ "$token" == "null" || -z "$token" ]]; then
        echo -e "${RED}‚úó –ù–µ –ø–æ–ª—É—á–µ–Ω $token_name${NC}"
        return 1
    fi
    echo -e "${GREEN}‚úì –ü–æ–ª—É—á–µ–Ω $token_name${NC}"
    return 0
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
API_URL="http://localhost:8000/auth"
TIMESTAMP=$(date +%s)
USERNAME="testuser_${TIMESTAMP}"
EMAIL="test_${TIMESTAMP}@example.com"
PASSWORD="TestPassword123!"

echo -e "${BLUE}üîê –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...${NC}"
echo -e "${BLUE}üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:${NC}"
echo "Username: $USERNAME"
echo "Email: $EMAIL"
echo -e "Password: $PASSWORD\n"

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    echo -e "\n${BLUE}üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...${NC}"
    if [[ -n "$ACCESS_TOKEN" ]]; then
        echo "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞..."
        curl -s -X POST "$API_URL/logout" \
            -H "Authorization: Bearer $ACCESS_TOKEN" > /dev/null
    fi
    
    if [[ -n "$NEW_ACCESS_TOKEN" ]]; then
        echo "–û—á–∏—Å—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞..."
        curl -s -X POST "$API_URL/logout" \
            -H "Authorization: Bearer $NEW_ACCESS_TOKEN" > /dev/null
    fi
}

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º cleanup –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
trap cleanup EXIT

echo -e "\n${BLUE}1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...${NC}"
response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "$API_URL/register" \
    -H "Content-Type: application/json" \
    -d "{
        \"username\": \"$USERNAME\",
        \"email\": \"$EMAIL\",
        \"password\": \"$PASSWORD\"
    }")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if check_status "$response" "201"; then
    log_test_result "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" "pass"
else
    log_test_result "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" "fail"
fi

# –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
RESPONSE_BODY=$(get_response_body "$response")
echo "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $RESPONSE_BODY"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ user_id
USER_ID=$(echo "$RESPONSE_BODY" | jq -r '.user_id')
if [[ "$USER_ID" != "null" && -n "$USER_ID" ]]; then
    log_test_result "–ü–æ–ª—É—á–µ–Ω–∏–µ user_id" "pass"
else
    log_test_result "–ü–æ–ª—É—á–µ–Ω–∏–µ user_id" "fail"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
if check_json_field "$RESPONSE_BODY" "message" "User created successfully" "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"; then
    log_test_result "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" "pass"
else
    log_test_result "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" "fail"
fi

echo -e "\n${BLUE}2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É...${NC}"
response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "$API_URL/login" \
    -H "Content-Type: application/json" \
    -d "{
        \"username\": \"$USERNAME\",
        \"password\": \"$PASSWORD\"
    }")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
if check_status "$response"; then
    log_test_result "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É" "pass"
else
    log_test_result "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É" "fail"
    exit 1
fi

RESPONSE_BODY=$(get_response_body "$response")
echo "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $RESPONSE_BODY"

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
ACCESS_TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.access_token')
REFRESH_TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.refresh_token')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
test_tokens_valid=true

if [[ "$ACCESS_TOKEN" == "null" || -z "$ACCESS_TOKEN" ]] || \
   ! echo "$ACCESS_TOKEN" | grep -q "^ey.*\..*\..*$"; then
    echo -e "${RED}‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç access token${NC}"
    test_tokens_valid=false
fi

if [[ "$REFRESH_TOKEN" == "null" || -z "$REFRESH_TOKEN" ]] || \
   ! echo "$REFRESH_TOKEN" | grep -q "^ey.*\..*\..*$"; then
    echo -e "${RED}‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç refresh token${NC}"
    test_tokens_valid=false
fi

if [[ "$(echo "$RESPONSE_BODY" | jq -r '.token_type')" != "bearer" ]]; then
    echo -e "${RED}‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞${NC}"
    test_tokens_valid=false
fi

if [ "$test_tokens_valid" = true ]; then
    log_test_result "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤" "pass"
else
    log_test_result "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤" "fail"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
echo -e "\n${BLUE}3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...${NC}"
response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X GET "$API_URL/me" \
    -H "Authorization: Bearer $ACCESS_TOKEN")

if check_status "$response"; then
    log_test_result "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ" "pass"
else
    log_test_result "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ" "fail"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
echo -e "\n${BLUE}4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...${NC}"
response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "$API_URL/refresh" \
    -H "Content-Type: application/json" \
    -d "{
        \"refresh_token\": \"$REFRESH_TOKEN\"
    }")

if check_status "$response"; then
    log_test_result "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞" "pass"
else
    log_test_result "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞" "fail"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
RESPONSE_BODY=$(get_response_body "$response")
NEW_ACCESS_TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.access_token')

echo -e "\n${BLUE}5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ access_token...${NC}"
response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X GET "$API_URL/me" \
    -H "Authorization: Bearer $NEW_ACCESS_TOKEN")

if check_status "$response"; then
    log_test_result "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞" "pass"
else
    log_test_result "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞" "fail"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 9: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
echo -e "\n${BLUE}6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...${NC}"
response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST "$API_URL/logout" \
    -H "Authorization: Bearer $NEW_ACCESS_TOKEN")

if check_status "$response"; then
    log_test_result "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã" "pass"
else
    log_test_result "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã" "fail"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
echo -e "\n${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ...${NC}"
response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X GET "$API_URL/me" \
    -H "Authorization: Bearer $NEW_ACCESS_TOKEN")

if check_status "$response" "401"; then
    log_test_result "–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞" "pass"
else
    log_test_result "–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞" "fail"
fi

# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
echo -e "\n${BLUE}=== –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===${NC}"
if [ $PASSED_TESTS -eq $TOTAL_TESTS ]; then
    echo -e "${GREEN}‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã ($PASSED_TESTS –∏–∑ $TOTAL_TESTS) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!${NC}"
    exit 0
else
    echo -e "${RED}‚ùå –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ $PASSED_TESTS –∏–∑ $TOTAL_TESTS —Ç–µ—Å—Ç–æ–≤${NC}"
    if [ ${#FAILED_TESTS[@]} -gt 0 ]; then
        echo -e "\n${RED}–ù–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:${NC}"
        for test in "${FAILED_TESTS[@]}"; do
            echo -e "${RED}  - $test${NC}"
        done
    fi
    exit 1
fi
